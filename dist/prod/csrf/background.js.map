{"mappings":"kBAAMA,EAAY,GAwBlBC,QAAQC,QAAQC,UAAUC,aAdHC,IARA,IAAIC,EAWR,YAAZD,EAAQE,MAAuBP,EAAaK,EAAQG,SAEnDP,QAAQQ,WAAWC,oBAAoBN,aAbpBE,EAcGD,EAAQG,MAb1BG,UACEC,EAAe,CAAIC,KAAI,eAAkBL,MAAOF,UACtDK,EAAEG,eAAeC,KAAKH,IACdE,eAAgBH,EAAEG,kBAUS,CAC9BE,KAAI,+CAGThB,EAAaK,EAAQG,QAAS","sources":["src/csrf/background.js"],"sourcesContent":["const csrfHandlers = {};\n\nconst createCsrfHandler = (csrfToken) => {\n    return (e) => {\n        const csrfTokenHeader = {name: 'X-CSRF-TOKEN', value: csrfToken}\n        e.requestHeaders.push(csrfTokenHeader);\n        return {requestHeaders: e.requestHeaders};\n    }\n}\n\nconst handleMessage = (request) => {\n    // and the listener is not already added then add listener\n    // if the incomming reqest is for adding a new csrf token\n    if(request.type == 'csrf-add' && !csrfHandlers[request.value]) {\n        // add the csrf handler function\n        browser.webRequest.onBeforeSendHeaders.addListener(\n            createCsrfHandler(request.value),\n            {urls: [\"<all_urls>\"]},\n            [\"blocking\", \"requestHeaders\"]\n        );\n        csrfHandlers[request.value] = true;\n    }\n}\n\nbrowser.runtime.onMessage.addListener(handleMessage);"],"names":["$ef0b400c17cad064277db80fe6c51c1f$var$csrfHandlers","browser","runtime","onMessage","addListener","request","csrfToken","type","value","webRequest","onBeforeSendHeaders","e","csrfTokenHeader","name","requestHeaders","push","urls"],"version":3,"file":"background.js.map"}